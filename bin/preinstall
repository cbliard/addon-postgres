#!/bin/bash

set -e

. "${INSTALLER_DIR}/wizard"

ADDON_VERSION="v1"

MSG_CONFLICTING_INSTALL="ERROR: It seems like you already have PostgreSQL v10 installed. Please run '$APP_NAME reconfigure' and choose to use the existing installation instead."
MSG_UNKNOWN_DISTRIBUTION_VERSION="ERROR: The current distribution is not supported by this wizard. Please install PostgreSQL manually and retry."
MSG_CONNECTION_KO="ERROR: Connection KO. Aborting postgres installation."

PGPORT="$(wiz_get "postgres/db_port" || echo "5432")"
PGDATABASE="$(wiz_get "postgres/db_name" || echo "$APP_SAFE_NAME")"
PGUSER="$(wiz_get "postgres/db_username" || echo "$APP_SAFE_NAME")"

install_postgres_server() {
	local addon_version="$(wiz_get "postgres/addon_version" || echo "v0")"

	if [ "$addon_version" == "$ADDON_VERSION" ]; then
		echo "INFO: PostgreSQL has already been configured by this addon. Skipping to next step."
		exit 0
	fi

	case $(wiz_fact "osfamily") in
		"debian")
			case $(wiz_fact "osversion") in
				"7")
					codename="wheezy"
					;;
				"8")
					codename="jessie"
					;;
				"9")
					codename="stretch"
					;;
				"14.04")
					codename="trusty"
					;;
				"16.04")
					codename="xenial"
					;;
				"18.04")
					codename="bionic"
					;;
			esac

			if [ "$codename" != "" ]; then
				if wiz_check_package "postgresql-10" ; then
					echo "$MSG_CONFLICTING_INSTALL"
					exit 1
				else
					_ensure_port_available
					echo "deb http://apt.postgresql.org/pub/repos/apt/ ${codename}-pgdg main" > /etc/apt/sources.list.d/pgdg.list
					wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
					apt-get update -qq
					DEBIAN_FRONTEND=noninteractive apt-get install postgresql-10 -y

					su - postgres -c "/usr/lib/postgresql/10/bin/pg_ctl -D /var/lib/postgresql/10/main stop || true"
					_configure_postgres_server "/etc/postgresql/10/main"
					su - postgres -c "/usr/lib/postgresql/10/bin/pg_ctl -D /var/lib/postgresql/10/main -l logfile restart"
					_configure_database_and_user
				fi
			else
				echo "$MSG_UNKNOWN_DISTRIBUTION_VERSION"
				exit 1
			fi
			;;
		"redhat")
			case $(wiz_fact "osversion") in
				"7")
					if wiz_check_package "postgresql10-server" ; then
						echo "$MSG_CONFLICTING_INSTALL"
						exit 1
					else
						_ensure_port_available
						yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat10-10-2.noarch.rpm
						yum install postgresql10-server postgresql10 -y
						/usr/pgsql-10/bin/postgresql-10-setup initdb

						_configure_postgres_server "/var/lib/pgsql/10/data"
						systemctl enable postgresql-10
						systemctl restart postgresql-10
						_configure_database_and_user
					fi
					;;
				*)
					echo "$MSG_UNKNOWN_DISTRIBUTION_VERSION"
					exit 1
					;;
			esac
			;;
		"suse")
			case $(wiz_fact "osversion") in
				12)
					if wiz_check_package "postgresql10-server" ; then
						echo "$MSG_CONFLICTING_INSTALL"
						exit 1
					else
						_ensure_port_available
						zypper addrepo https://download.postgresql.org/pub/repos/zypp/repo/pgdg-sles-10.repo
						zypper install postgresql10-server -y
						su - postgres -c "/usr/lib/postgresql10/bin/initdb -D /var/lib/pgsql/10/data"

						_configure_postgres_server "/var/lib/pgsql/10/data"
						su - postgres -c "/usr/lib/postgresql10/bin/pg_ctl -D /var/lib/pgsql/10/data start"
						_configure_database_and_user
					fi
					;;
				*)
					echo "$MSG_UNKNOWN_DISTRIBUTION_VERSION"
					exit 1
					;;
			esac
			;;
	esac
}

function _ensure_connection_ok() {
	local command="select version();"
	if env -i PGCONNECT_TIMEOUT=5 PGDATABASE="$PGDATABASE" PGUSER="$PGUSER" \
		su "$PGUSER" -c "psql --no-password --command='$command'" ; then
		echo "INFO: Connection OK"
	else
		echo "$MSG_CONNECTION_KO"
		exit 1
	fi
}

function _ensure_port_available() {
	# assume port is free if netstat unavailable
	if ! which netstat &>/dev/null ; then
		return 0;
	fi

	if netstat -tulpn | grep ":$PGPORT" &>/dev/null ; then
		echo "ERROR: port $PGPORT is already in use. Can't install new PostgreSQL server."
		exit 1
	else
		return 0
	fi
}

function _configure_postgres_server() {
	local base_dir="$1"
	sed -i "s|#include_dir = 'conf.d'|include_dir = 'conf.d'|" $base_dir/postgresql.conf
	mkdir -p $base_dir/conf.d
	echo "port = $PGPORT" > $base_dir/conf.d/custom.conf
	chown -R postgres:postgres $base_dir/conf.d
}

function _configure_database_and_user() {
	local dbname="$PGDATABASE"
	PGPORT=$PGPORT su postgres -c "createuser --createdb --login --superuser $dbname"
	PGPORT=$PGPORT su postgres -c "createdb -O $dbname $dbname"
}

case "$(wiz_get "postgres/autoinstall")" in
	"skip")
		echo "INFO: autoinstall=skip. Skipping to next step."
		;;
	"install")
		echo "INFO: autoinstall=install. A new PostgreSQL v10 server will be installed locally unless a conflicting installation is found."
		install_postgres_server
		wiz_set "postgres/addon_version" "$ADDON_VERSION"
		_ensure_connection_ok
		;;
	"reuse")
		echo "INFO: autoinstall=reuse. Skipping to next step."
		;;
	*)
		echo "ERROR: Unknown value for postgres/autoinstall"
		exit 1
		;;
esac

exit 0
